# functions for mk.livecd
#
# Copyright 2013 Vyatta, Inc

export VYOS_REQUIRED_PACKAGES="vyatta-bash, vyatta-biosdevname, vyatta-busybox, \
    vyatta-cfg, vyatta-cfg-dhcp-relay, \
    vyatta-cfg-dhcp-server, vyatta-cfg-firewall, vyatta-cfg-op-pppoe, \
    vyatta-cfg-qos, vyatta-cfg-quagga, vyatta-cfg-system, vyatta-cfg-vpn, \
    vyatta-cluster, vyatta-config-mgmt, vyatta-config-migrate, \
    vyatta-conntrack, vyatta-conntrack-sync, vyatta-cron, \
    vyatta-dhcp3-client, vyatta-dhcp3-common, vyatta-dhcp3-relay, \
    vyatta-dhcp3-server, vyatta-eventwatch, vyatta-ipv6-rtradv, \
    vyatta-keepalived, vyatta-lldp, vyatta-nat, vyatta-netflow, \
    vyatta-op, vyatta-op-dhcp-server, vyatta-op-firewall, \
    vyatta-op-qos, vyatta-op-quagga, vyatta-op-vpn, vyatta-openvpn, \
    vyatta-ppp, vyatta-quagga, vyatta-ravpn, vyatta-util, vyatta-vrrp, \
    vyatta-wanloadbalance, vyatta-webgui, vyatta-webproxy, vyatta-wireless, \
    vyatta-wirelessmodem, vyatta-zone, vyos-nhrp, vyos-opennhrp"


clean_mounts() 
{               
  for m in proc-live sysfs-live devpts-live ; do
    if grep -q $m /proc/mounts ; then
      echo I: unmounting $m
      umount $m || true
    fi
  done
}

# Returns version string used in "Description"
# e.g. "VyOS 1.0.0 (hydrogen)"
get_full_version () {
    local branch=$(git branch | awk '/^\*/ {print $2}')
    echo "VyOS $1 ($branch)"
}

# Returns numeric version from ./version files
# e.g. "1.0.0"
get_version () {
  if [ -f version ]; then
    cat version
  fi
}

get_dev_version () {
  local cur_time=$(date +%m%d%H%M)
  local branch=$(git branch | awk '/^\*/ {print $2}')
  # note: this is used as the debian package version string, so
  # avoid problematic chars.
  # use a string starting with a numeric character for
  # full-upgrade compatibility.
  echo -n "999.$branch.$cur_time" | tr -d '_+-'
}

get_actual_version () {
    echo "I: Determining build type and release version"

    NUMERIC_VERSION=$(get_version)
    FULL_VERSION=$(get_full_version "$NUMERIC_VERSION")

    if [ -z "$NUMERIC_VERSION" ]; then
      NUMERIC_VERSION=$VYOS_DEV_VERSION
      FULL_VERSION=$VYOS_DEV_VERSION
      echo "I: Build type: DEVELOPMENT, version $FULL_VERSION"
    else
      echo "I: Build type: RELEASE, version $FULL_VERSION"
    fi

    export NUMERIC_VERSION=$NUMERIC_VERSION
    export FULL_VERSION=$FULL_VERSION
}

mk_version_package ()
{
    local savedir="$PWD"
    local etcdir="$savedir"/chroot/opt/vyatta/etc
    local tmpdir=/tmp/$$-version
    local vf=$tmpdir/opt/vyatta/etc
    local arch=$(dpkg-architecture -qDEB_BUILD_ARCH)

    mkdir -p $vf/config

    cp templates/config.boot.default $vf/.

    cd $tmpdir
    mkdir DEBIAN

    echo I: generating build record
    cat <<-EOF > $vf/iso-build.txt
Built by:     $BUILTBY
Built on:     $HUMANTIME
Build ID:     $BUILDID
EOF

    # backwards compatible symlink
    ln -nsf iso-build.txt $vf/build.txt
    #echo "$BUILDID">$savedir/iso-label # is this needed?

    echo I: generating package list
    chroot "$savedir"/chroot sh -c "dpkg-query -W -f '${Status} ${Package} ${Version}\n' \
                                      | sed -n 's/^install ok installed //p' \
                                        > /opt/vyatta/etc/deb-versions.txt"

    mv $etcdir/deb-versions.txt $vf/.

    ( cd "$savedir"/.. ; git submodule status 2>/dev/null ) \
         > $vf/iso-submodules.txt
    [ -s $vf/iso-submodules.txt ] || cp "$savedir"/iso-submodules.txt $vf/. 2>/dev/null

    echo vyatta-version ${NUMERIC_VERSION} >> $vf/deb-versions.txt

    echo "Version:      FwOS ${NUMERIC_VERSION}" > $vf/version
    echo "Description:  ${FULL_VERSION}" >> $vf/version
    echo "Copyright:    ${CURYEAR} VyOS maintainers and contributors FwOS maintainers and contributors" >> $vf/version
    ln -nsf version $vf/version-virt

    (
        echo "Package: vyatta-version"
        echo "Version: ${NUMERIC_VERSION}"
        echo "Architecture: ${arch}"
        echo "Maintainer: FwOS Package Maintainers <maintainers@>"
        echo "Essential: no"
        echo "Section: base"
        echo "Replaces: vyatta-version, vc-version, vc2-version, devel-version, vyatta-cfg-system"
        echo "Depends: $VYOS_REQUIRED_PACKAGES" 
        echo -n Suggests: 
        <$vf/deb-versions.txt sed -e 's/ *\([^ ]*\)$/(>=\1),/' -e 's/^/ /'
        echo " nano"
        echo Description: "$prefix version file"
        echo " This package sets up the version file and a file containing"
        echo " the list of recommended packages (with the recommended versions)"
    ) >DEBIAN/control

    vpkgname="vyatta-version_${NUMERIC_VERSION}_${arch}.deb"
    mkdir ../$$-deb
    dpkg --build . "../$$-deb/$vpkgname" >/dev/null

    rm -rf $tmpdir
    cd $savedir
    cp /tmp/$$-deb/$vpkgname chroot/
    mv /tmp/$$-deb/$vpkgname config/chroot_local-packages/.
    # dpkg should be done inside chroot
    chroot chroot dpkg -i /$vpkgname
    rm chroot/$vpkgname
    rm -rf /tmp/$$-deb
}

clean_up_xen_pv_image ()
{
  XEN_IMAGE_DIR=xen-pv-image
  # clean up the mounts
  echo I: unmounting the image file
  umount $XEN_IMAGE_DIR/pimage
  echo I: releasing loop device $loop
  losetup -d $loop
}

# Create the VyOS domU image
vyos-xen-pv-image ()
{
  echo I: creating Xen PV image

  XEN_IMAGE_DIR=xen-pv-image

  rm -rf $XEN_IMAGE_DIR
  mkdir -p $XEN_IMAGE_DIR/pimage

  arch=$(dpkg-architecture -qDEB_BUILD_ARCH)
  NUMERIC_VERSION=$(get_version)
  if [ -z "$NUMERIC_VERSION" ]; then
    NUMERIC_VERSION=999
  fi

  # sparse image
  dd if=/dev/zero of=$XEN_IMAGE_DIR/vyos-xen-pv-$NUMERIC_VERSION-$arch.img bs=1 count=0 seek=$PV_IMAGE_SIZE

  # allocate loop device for file
  loop=$(losetup -f)
  losetup $loop $XEN_IMAGE_DIR/fwos-xen-pv-$NUMERIC_VERSION-$arch.img || echo E: unable to allocate loop device

  # create filesystem
  mke2fs -j $loop

  # mount loop device and copy root image
  echo I: mounting PV image file
  mount $loop $XEN_IMAGE_DIR/pimage
  echo I: copying root to PV image
  cp -aR chroot/* $XEN_IMAGE_DIR/pimage/

  # stage the chroot
  # setup config.boot if neccessary
  
  # we need an "unwrapped" verison of the kernel image for pygrub 
  echo I: fixing PV image kernel
  oimg=$(find $XEN_IMAGE_DIR/pimage/boot/ -maxdepth 1 \
          -name 'vmlinuz-*-vyos*' | head -1)
  if [ -z "$oimg" ]; then
    echo E: Cannot find VyOS kernel in chroot
    clean_up_xen_pv_image
    return 1
  fi
  nimg=${oimg/vmlinuz/vmlinux}
  gzoff=$(../tools/find-string-index.pl '\x1f\x8b\x08\x00' $oimg)
  if [ -z "$gzoff" ]; then
    echo E: Cannot unwrap $oimg
    clean_up_xen_pv_image
    return 1
  fi
  dd if=$oimg of=$nimg.gz bs=1 skip=$gzoff
  if ! file $nimg.gz | grep -q 'gzip compressed data'; then
    echo E: Cannot unwrap $oimg
    clean_up_xen_pv_image
    return 1
  fi
  zcat $nimg.gz > $nimg.0
  if ! file $nimg.0 | grep -q 'ELF ..-bit LSB.*, stripped'; then
    echo E: Cannot unwrap $oimg
    clean_up_xen_pv_image
    return 1
  fi
  gzip -c $nimg.0 > $nimg
  rm -f $nimg.gz $nimg.0

  # create the default domU configuration file
  cat <<-EOF > $XEN_IMAGE_DIR/vyos-xen-pv-$NUMERIC_VERSION.cfg
	name='vyos-$NUMERIC_VERSION'
	bootloader='/usr/bin/pygrub'
	on_reboot='restart'
	on_shutdown='destroy'
	on_crash='destroy'
	image_name='vyos-$NUMERIC_VERSION'
	disk=['file:/var/xen/fwos-xen-pv-$NUMERIC_VERSION-$arch.img,$PV_BOOT_DEVICE,w']
	vcpus=1
	memory=1024
	EOF

  xen_kernel_version=$(ls $XEN_IMAGE_DIR/pimage/boot/vmlinu[xz]-* | sed "s:$XEN_IMAGE_DIR/pimage/boot/::g" | sort )

  if [[ $PV_BOOT_DEVICE = *[[:digit:]] ]]; then
    GRUB_ROOT="(hd0,0)"
  else
    GRUB_ROOT="(hd0)"
  fi
  
  mkdir -p $XEN_IMAGE_DIR/pimage/boot/grub
  
  (
      # stage the grub menu.lst for pygrub.
      echo -e "timeout\t5"
      echo
      for version in $xen_kernel_version; do
          echo -e "title\t$version"
          echo -e "root\t$GRUB_ROOT"
          echo -e "kernel\t/boot/$version root=/dev/$PV_BOOT_DEVICE ro console=hvc0"
          iversion=$(echo $version | sed 's/vmlinu[xz]-//g')
          echo -e "initrd\t/boot/initrd.img-$iversion"
          echo
      done
  ) > "$XEN_IMAGE_DIR/pimage/boot/grub/menu.lst"

  # update config.boot.default for Xen console access
  sed -i -e 's/device ttyS0/device hvc0/' $XEN_IMAGE_DIR/pimage/opt/vyatta/etc/config.boot.default
  sed -i -e 's/speed 9600/speed 38400/' $XEN_IMAGE_DIR/pimage/opt/vyatta/etc/config.boot.default
  # set /etc/hostname
  rm -f $XEN_IMAGE_DIR/pimage/etc/hostname
  echo fwos > $XEN_IMAGE_DIR/pimage/etc/hostname
  # set /etc/hosts
  rm -f $XEN_IMAGE_DIR/pimage/etc/hosts
  echo 127.0.0.1 localhost fwos > $XEN_IMAGE_DIR/pimage/etc/hosts
  # set /etc/fstab
  rm -f $XEN_IMAGE_DIR/pimage/etc/fstab
  echo -e "/dev/$PV_BOOT_DEVICE\t/\text3\tdefaults\t0 1" > $XEN_IMAGE_DIR/pimage/etc/fstab

  clean_up_xen_pv_image

  echo I: compressing Xen PV image file
  gzip $XEN_IMAGE_DIR/fwos-xen-pv-$NUMERIC_VERSION-$arch.img
}

get_chroot_kernel_version ()
{
  local kfile=$(find chroot/boot -type f -name 'vmlinuz-*' \
                | head -1 2>/dev/null)
  echo -n ${kfile##chroot/boot/vmlinuz-}
}

create_default_grub_config ()
{
  local gdir=chroot/opt/vyatta/etc/grub
  local gfile=$gdir/default-union-grub-entry
  local tmpl=templates/grub/default-union-grub-template
  local kver=$(get_chroot_kernel_version)
  if [ -z "$kver" ]; then
    echo 'E: Cannot find kernel in chroot.'
    echo 'E: Default grub config not created.'
    return
  fi
  mkdir -p $gdir
  sed "s/\\\$RVER\\\$/$VVERSION/g;s/\\\$KVER\\\$/$kver/g" $tmpl > $gfile
}

set_up_lh_config ()
{
  if [ -z "$VYOS_BUILD_BRANCH" ]; then
    echo E: Build branch is not set
    exit 1
  fi
  local branch=$VYOS_BUILD_BRANCH

  # get the branch/repo related parameters if any
  if [ -f config.vyatta/vbuild.conf ]; then
    source config.vyatta/vbuild.conf
  fi

  # Remove trailing /'s from URLs
  VYOS_DEBIAN_MIRROR=`echo $VYOS_DEBIAN_MIRROR | sed -re 's!(.*[^/])/+$!\1!'`
  VYOS_DEBIAN_BOOTSTRAP_MIRROR=`echo $VYOS_DEBIAN_BOOTSTRAP_MIRROR | sed -re 's!(.*[^/])/+$!\1!'`
  VYOS_PACKAGE_MIRROR=`echo $VYOS_PACKAGE_MIRROR | sed -re 's!(.*[^/])/+$!\1!'`

  # set up the debian repo
  LB_MIRROR_BINARY=$VYOS_DEBIAN_MIRROR/debian/$branch
  LB_MIRROR_BOOTSTRAP=$VYOS_DEBIAN_BOOTSTRAP_MIRROR/debian/$branch

  echo "I: Using Debian mirror $LB_MIRROR_BINARY"
  echo "I: Using Debian bootstrap mirror $LB_MIRROR_BOOTSTRAP"

  export LB_MIRROR_BINARY LB_MIRROR_BOOTSTRAP

  local dev_repo_root=$VYOS_PACKAGE_MIRROR/vyos
  local repo_dir=unstable
  if ! eval "$VYOS_DEV_BUILD"; then
    # not dev build => use testing.
    #repo_dir=testing
    repo_dir=unstable
  fi

  echo "I: Using VyOS package mirror $dev_repo_root"

  # prepare the config files for live helper
  lb config
  (
    cd config.vyatta
    cp -af binary_local-includes chroot_apt chroot_local-hooks \
      chroot_local-includes chroot_sources chroot_local-packageslists \
      binary_local-hooks \
      ../config/

    # set up chroot_sources
    cd ../config/chroot_sources
    ## "this" branch
    if [ ! -f vyatta.chroot ]; then
      echo "deb $dev_repo_root $branch main" > vyatta.chroot
    fi
    ## switch between development or release keys depending on build type
    if eval "$VYOS_DEV_BUILD"; then
      cp development.vyatta.chroot.gpg vyatta.chroot.gpg
    else
      cp release.vyatta.chroot.gpg vyatta.chroot.gpg
    fi
    ## "base" and "extra" branches for overlay
    for branch in "$VBUILD_BASE_BRANCH" "${VBUILD_EXTRA_BRANCHES[@]}"; do
      if [ -z "$branch" ] || [ -f "vyatta-$branch.chroot" ]; then
        continue
      fi
      echo "deb $dev_repo_root $branch main" > "vyatta-$branch.chroot"
      cp vyatta.chroot.gpg "vyatta-$branch.chroot.gpg"
    done

    # set up apt preferences
    cd ../chroot_apt
    for val in "$VYOS_BUILD_BRANCH" "$VBUILD_BASE_BRANCH" \
                  "${VBUILD_EXTRA_PKGS[@]}"; do
      if [ -z "$val" ]; then
        continue
      fi
      local label=EXTRA
      local prio=999
      local pkg='*'
      if [ "$val" == "$VYOS_BUILD_BRANCH" ]; then
        # "this" branch
        label=OVERLAY
        prio=1000
        branch=$val
      elif [ "$val" == "$VBUILD_BASE_BRANCH" ]; then
        # "base" branch
        label=BASE
        prio=998
        branch=$val
      else
        # extra package
        branch=${val%%_*}
        pkg=${val##*_}
      fi
      cat <<EOF >>preferences

Explanation: BEGIN $label ENTRY
Package: $pkg
Pin: release v=$branch
Pin-Priority: $prio
Explanation: END $label ENTRY
EOF
    done
  )

  if ! eval "$create_xen_pv_image"; then
    rm -f config/chroot_local-hooks/*xen*
  else
    rm -f config/chroot_local-hooks/05-event_tty
    rm -f config/chroot_local-packageslists/vyos-non-xen.list
  fi

  # set up "vyatta-kernel" packages list according to flavor
  kplist="config/chroot_local-packageslists/vyatta-kernel.$LB_LINUX_FLAVOURS"
  if [ -f "$kplist" ]; then
    # list exists. set it up.
    mv -f $kplist config/chroot_local-packageslists/vyatta-kernel.list
  fi
}

